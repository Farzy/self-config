global:
  domain: fargo.farzad.tech

crds:
  install: true
  keep: true

configs:
  params:
    server.insecure: true
  cm:
    exec.enabled: true
  rbac:
    create: true
    policy.default: role:readonly
    policy.csv: |-
      p, role:create-cluster, clusters, create, *, allow
      p, role:executor, exec, create, default/*, allow
      p, role:special-project, applications, *, special-project/*, allow
      g, farzad, role:create-cluster
      g, farzad, role:executor
      g, farzad, role:special-project
  secret:
    githubSecret: "{! githubSecret !}"

  # Define the ArgoCD Vault Plugin: https://argocd-vault-plugin.readthedocs.io/en/stable/installation/
  cmp:
    create: true
    plugins:
      argocd-vault-plugin:
        allowConcurrency: true
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name '*.yaml' | xargs -I {} grep \"<path\\|avp\\.kubernetes\\.io\" {} | grep ."
        generate:
          command:
            - argocd-vault-plugin
            - generate
            - "."
        lockRepo: false

controller:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}

dex:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}

redis:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}

server:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    extraTls:
      - hosts:
        - fargo.farzad.tech
        secretName: argocd-server-tls

  ingressGrpc:
      enabled: true
      hostname: fargo-grpc.farzad.tech
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
      extraTls:
        - hosts:
          - fargo-grpc.farzad.tech
          secretName: argocd-server-grpc-tls

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}

# Add ArgoCD Vault Plugin: https://argocd-vault-plugin.readthedocs.io/en/stable/installation/
repoServer:
  # Note: AVP config (for the secret manager, etc) can be passed in several ways. This is just one example
  # https://argocd-vault-plugin.readthedocs.io/en/stable/config/
  #envFrom:
  #  - secretRef:
  #      name: argocd-vault-plugin-credentials
  extraContainers:
    - name: avp
      command: [ /var/run/argocd/argocd-cmp-server ]
      image: alpine:3.8
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: argocd-vault-plugin.yaml
          name: cmp-plugin
        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin
  initContainers:
    - name: download-tools
      image: alpine:3.8
      command: [ sh, -c ]
      env:
        - name: AVP_VERSION
          value: "{! argocd_vault_plugin_version !}"
      args:
        - >-
          wget -O argocd-vault-plugin
          https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  volumes:
    - configMap:
        name: argocd-cmp-cm
      name: cmp-plugin
    - name: custom-tools
      emptyDir: { }
  serviceAccount:
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}

applicationSet:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}

notifications:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: {! prometheus_release_name !}
  secret:
    items:
      slack-token: {! slack_token !}
  notifiers:
    service.slack: |
      token: $slack-token
      username: argocd-bot
      icon: ":rocket:"
  subscriptions:
    - recipients:
      - slack:farzad-test-notifications
      triggers:
      - on-sync-succeeded
  triggers:
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded-slack
        when: app.status.operationState.phase in ['Succeeded']
  templates:
    template.app-sync-succeeded-slack: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            },
            {
              "title": "Commit Author",
              "value": "{{ (call .repo.GetCommitMetadata .app.status.sync.revision).Author }}",
              "short": true
            },
            {
              "title": "Commit Message",
              "value": "{{ (call .repo.GetCommitMetadata .app.status.sync.revision).Message }}",
              "short": true
            },
            {
              "title": "Commit Date Time",
              "value": "{{ (call .repo.GetCommitMetadata .app.status.sync.revision).Date }}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
